[common]
server_addr = x.x.x.x
server_port = 7000

# connect frps by http_proxy
# http_proxy = http://x.x.x.x

# limit connection
# pool_count = 1

# kcp
# protocol = kcp

# tcp stream multiplex
# tcp_mux = false  

# Allow ports
# allow_ports = 2000-3000,3001,3003,4000-50000

# tls
# tls_enable = true
# tls_cert_file = certificate.crt
# tls_key_file = certificate.key
# tls_trusted_ca_file = ca.crt

# Admin UI
admin_addr = 127.0.0.1
admin_port = 7400
admin_user = admin
admin_pwd = admin

# curl -I http://127.0.0.1:7400

[ssh]
type = tcp
local_ip = 127.0.0.1
local_port = 22
# encryption
# use_encryption = true   
# compress
# use_compression = true  
# expose port on server
remote_port = 6000 
# bandwith limit
# bandwidth_limit = 1MB 

# health
# Enable TCP health check
# health_check_type = tcp
# TCPing timeout seconds
# health_check_timeout_s = 3
# If health check failed 3 times in a row, the proxy will be removed from frps
# health_check_max_failed = 3
# A health check every 10 seconds
# health_check_interval_s = 10

# ssh -p 6000 root@x.x.x.x

# [range:test_tcp]
# type = tcp
# local_ip = 127.0.0.1
# local_port = 6000-6006,6007
# remote_port = 6000-6006,6007

# it's can build: [web1] [web2] ...
# [web]       
# type = http
# local_port = 80
# server ip or domain
# custom_domains = x.x.x.x

# route
# location = /index

# subdomain test.frps.com
# subdomain = test

# auth web service
# http_user = abc
# http_pwd = abc

# load balance , need start server config
# group = web
# group_key = 123

# Enable HTTP health check
# health_check_type = http
# frpc will send a GET request to '/status'
# and expect an HTTP 2xx OK response
# health_check_url = /status
# health_check_timeout_s = 3
# health_check_max_failed = 3
# health_check_interval_s = 10

# rewrite header
# host_header_rewrite = dev.example.com
# header_X-From-Where = frp

# curl -I http://x.x.x.x:8080

# [proxy1]
# type = tcpmux
# multiplexer = httpconnect
# custom_domains = x.x.x.x
# local_port = 80

# [proxy2]
# type = tcpmux
# multiplexer = httpconnect
# custom_domains = test2
# local_port = 8080

# [dns]
# type = udp
# local_ip = 8.8.8.8
# local_port = 53
# remote_port = 6000

# dig @x.x.x.x -p 6000 www.google.com

# [unix_domain_socket]
# type = tcp
# remote_port = 6000
# plugin = unix_domain_socket
# plugin_unix_path = /var/run/docker.sock

# get docker version
# curl http://x.x.x.x:6000/version 

# [test_static_file]
# type = tcp
# remote_port = 6000
# plugin = static_file
# plugin_local_path = /tmp/files
# plugin_strip_prefix = static
# plugin_http_user = abc
# plugin_http_passwd = abc

# [test_https2http]
# type = https
# server ip or domain
# custom_domains = x.x.x.x 
# 
# plugin = https2http
# plugin_local_addr = 127.0.0.1:9001
# plugin_crt_path = ./server.crt
# plugin_key_path = ./server.key
# plugin_host_header_rewrite = 127.0.0.1
# plugin_header_X-From-Where = frp

# https://x.x.x.x:7000

# [secret_ssh]
# type = stcp
# sk = abcdefg
# local_ip = 127.0.0.1
# local_port = 22

# [secret_ssh_visitor]
# type = stcp
# role = visitor
# server_name = secret_ssh
# sk = abcdefg
# bind_addr = 127.0.0.1
# bind_port = 6000

# [p2p_ssh]
# type = stcp
# sk = abcdefg
# local_ip = 127.0.0.1
# local_port = 22

# [p2p_ssh_visitor]
# type = stcp
# role = visitor
# server_name = p2p_ssh
# sk = abcdefg
# bind_addr = 127.0.0.1
# local port
# bind_port = 6000      

# ssh -p 6000 127.0.0.1

# include=./confd/*.ini

